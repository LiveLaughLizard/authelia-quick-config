---
# Minimal Authelia helm chart values to get up and running fast

ingress:
  enabled: true
  className: nginx

  annotations:
    # cert-manager annotations for automatic TLS certificate generation
    cert-manager.io/cluster-issuer: letsencrypt-prod
    cert-manager.io/common-name: auth.example.com

  tls:
    enabled: true
    secret: authelia-tls  # cert-manager will create this secret

# Pod configuration
pod:
  kind: StatefulSet
  replicas: 2

  env:
    # Timezone configuration
    - name: TZ
      value: "America/Chicago"  # Update to your timezone

  resources:
    limits:
      cpu: "1"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

# Authelia configuration
configMap:
  theme: dark

  # Server configuration
  server:
    port: 9091

  # Logging configuration
  log:
    level: info
    format: text

  # Token configuration
  totp:
    disable: true
    issuer: auth.example.com

  webauthn:
    disable: true

  duo_api:
    enabled: false

  # Authentication backend - File-based
  authentication_backend:
    password_reset:
      disable: false

    refresh_interval: 5m

    file:
      enabled: true
      path: /config/users_database.yml
      watch: true
      search:
        email: true
        case_insensitive: false

    # LDAP disabled - uncomment and configure if needed
    # ldap:
    #   enabled: false
    #   implementation: custom  # Options: custom, activedirectory, freeipa, lldap
    #   address: ldap://openldap.default.svc.cluster.local:389
    #   timeout: 5s
    #   start_tls: false
    #   base_dn: dc=example,dc=com
    #   additional_users_dn: ou=users
    #   additional_groups_dn: ou=groups
    #   users_filter: "(&({username_attribute}={input})(objectClass=person))"
    #   groups_filter: "(&(member={dn})(objectClass=groupOfNames))"
    #   user: cn=admin,dc=example,dc=com
    #   password:
    #     secret_name: authelia-secrets
    #     path: ldap_password

  # Access control rules
  access_control:
    default_policy: 'one_factor'
    rules: []

  # Session configuration with Redis
  session:
    name: authelia_session

    # Session expiration
    expiration: 1h
    inactivity: 5m

    remember_me: 1M

    same_site: lax

    # Session cookies configuration
    cookies:
      - subdomain: auth
        domain: example.com
        default_redirection_url: https://example.com

    # Bitnami chart (no longer free - sadness)
    redis:
      enabled: false
      deploy: false
      host: 'redis-master.default.svc.cluster.local'
      port: 6379
      database_index: 0

      # Maximum number of connections
      maximum_active_connections: 8
      minimum_idle_connections: 0

      # Redis TLS configuration
      tls:
        enabled: false
        skip_verify: false
        minimum_version: TLS1.2

      high_availability:
        enabled: false
        sentinel_name: mysentinel
        username: ""
        nodes: []

      password:
        secret_name: authelia-secrets
        path: redis_password

  # Regulation (login attempt limits)
  regulation:
    max_retries: 3
    find_time: 2m
    ban_time: 5m

  # Storage backend - PostgreSQL
  storage:
    postgres:
      enabled: true
      deploy: false
      address: some.external.postgres.host
      database: authelia
      schema: public
      username: authelia
      timeout: 5s

      # Postgres TLS configuration
      tls:
        enabled: false
        skip_verify: false
        minimum_version: TLS1.2

      password:
        secret_name: authelia-secrets
        path: postgres_password

  # Notifier configuration - Filesystem
  notifier:
    disable_startup_check: false

    filesystem:
      enabled: true
      filename: /config/notification.txt

  # Identity Providers - OpenID Connect
  identity_providers:
    oidc:
      enabled: true

      # HMAC secret for OIDC tokens
      hmac_secret:
        secret_name: authelia-secrets
        path: oidc_hmac_secret

      # JWKS configuration for token signing
      jwks:
        - key:
            secret_name: authelia-secrets
            path: /secrets/authelia-secrets/oidc_jwks_key

      # Token lifetimes
      lifespans:
        access_token: 1m
        authorize_code: 1m
        id_token: 1m
        refresh_token: 30d

      # Enable PKCE
      enable_client_debug_messages: false
      enforce_pkce: public_clients_only

      # CORS configuration
      cors:
        endpoints:
          - authorization
          - token
          - revocation
          - introspection
        allowed_origins_from_client_redirect_uris: true

      clients:
        # Example confidential client
        - client_id: example.com
          client_name: "Example"
          client_secret:
            secret_name: authelia-secrets
            path: /secrets/authelia-secrets/oidc_client_example_app_secret

          public: false

          authorization_policy: one_factor  # No 2FA required

          redirect_uris:
            - https://example.com/auth/callback

          scopes:
            - openid
            - profile
            - email
            - groups

          grant_types:
            - authorization_code
            - refresh_token

          response_types:
            - code

          response_modes:
            - form_post
            - query

          token_endpoint_auth_method: client_secret_basic

secret:
  # Mount path for secrets
  mountPath: '/secrets'

  # Mount our external secret for explicit references (postgres, redis, oidc client secrets)
  additionalSecrets:
    authelia-secrets: {}

# Persistence for notifications
persistence:
  enabled: true
  storageClass: "longhorn"
  accessModes:
    - ReadWriteOnce
  size: 15Gi

# Service configuration
service:
  type: ClusterIP
  port: 80
  annotations: {}
